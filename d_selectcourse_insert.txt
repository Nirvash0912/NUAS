//d

//use procedure
delimiter $$
create procedure enroll_course (IN coursecode char(8), IN StudentId int(11), IN courseyear int(11), IN coursesemester char(2)) 
Begin 

declare status int default 0;

start transaction;
//Max_enrollment
if coursecode in (select c.uoscode from uosoffering as c where c.enrollment >= c.maxenrollment) then set status = 1;


//prerequiste
elseif coursecode not in (select r.uoscode from requires as r where r.prerequoscode in (select t.uoscode from transcript as t where t.studid =StudentId and t.grade = 'P')) then set status = 2; 
select uoscode,uosname from unitofstudy where uoscode in (select r.prereqUosCode from requires as r where r.uoscode = coursecode); 

else
set status = 3;
Insert into transcript values (StudentID,courseCode,courseyear,coursesemester,'null');
update uosoffering set enrollment = enrollment+1 where uoscode = coursecode and year = courseyear and semester = coursesemester; 

select status;

end if;

End $$
delimiter ;


//e

delimiter $$
create procedure withdraw_course (IN coursecode char(8), IN studentId int(11))
begin
declare status int default 0;

start transaction;

//course_not_enrolled
if coursecode not in (select t.uoscode from transcript as t where t.studid = studentId) then set status = 1;


//course_with_grade
elseif coursecode in (select t.uoscode from transcript as t where t.studid = studentId and t.grade is null) then set status = 2;

else
set status = 3;
delete from transcript where studid = studentId and uoscode = coursecode;
update uosoffering set enrollment = enrollment-1 where uoscode = coursecode;


select status;

end if;

end $$
delimiter ;


delimiter $$
create trigger half_MaxEnrollment After update of Enrollment on uosoffering for each row 
begin
declare warning int default 0; 
if new.enrollment<old.Maxenrollment set warning = 1; 
end if;
select warning;
end $$
delimiter ;




